Spatial Partition
---------------------IDEA---------------------
It is dividing the world into manageable and referencable parts.
The objects themselves should update the grid they are on.

---------------------EXAMPLE---------------------
It is like partitioning all cities in a country by state and population caps.

You could first partition your geographic points into regions like states using a spatial partitioning
method like an R-tree or a quadtree. Then, you could further partition each region by population size using another 
partitioning method, such as a range tree or a binary search tree. 

Alternatively, you could use a single partitioning method that takes into account both criteria at the same time, such 
as a KD-tree or a multi-dimensional grid. This would create a single partitioning structure that enables you to 
efficiently filter and retrieve cities based on their location and population size in a single query. 

The choice of partitioning method and criteria will depend on the specific requirements of your application and the 
nature of your spatial data.

---------------------TYPES---------------------
QUADTREE - Used normally in 2d games to divide an area into 4 equal quadrants at each level of the tree. 
Good for easy storage and retrieval of objects.
OCTREE - Same as quadtree but now for 3d spaces and splitting into 8 regions.
R-TREE - Like Oct tree but uses rectangles not cubes
KD-TREE - Uses Hyperplanes to partition any dimension in half and everything below and above a value go on each side. 
It can do this many times like the other Spatial Partition types.
VORONOI DIAGRAM - Used to divide regions and objects by how far away they are from certain points. Good for checking
what is close to different points.

---------------------USES---------------------
Path Finding - Dividing into quadrants to move towards destinations
Getting objects close to each other
Spawning objects relative to other objects
Loading large maps - dividing them up to load with out frame drops

---------------------PROS AND CONS---------------------
+ Find objects in regions rather than their Transform location
+ Easily reference objects by region or grid to spawn or despawn
+ Cuts down on number of objects to query
- More complexity
- Should not be used if it is not needed
- With computers being so fast now days "Performance" should not be the reason for using this

---------------------HOW TO USE---------------------
-> Download a 3rd party because this is either:
- - - Too complex to make an understandable generic solution, or
- - - Needs to be tailored project to project.