Spatial Partition

It is like partitioning all cities in a country by state and population caps.

You could first partition your geographic points into regions like states or counties using a spatial partitioning
method like an R-tree or a quadtree. Then, you could further partition each region by population size using another 
partitioning method, such as a range tree or a binary search tree. 

Alternatively, you could use a single partitioning method that takes into account both criteria at the same time, such 
as a KD-tree or a multi-dimensional grid. This would create a single partitioning structure that enables you to 
efficiently filter and retrieve cities based on their location and population size in a single query. 

The choice of partitioning method and criteria will depend on the specific requirements of your application and the 
nature of your spatial data.

Types
QUADTREE - Used normally in 2d games to divide an area into 4 equal quadrants at each level of the tree. Good for easy
storage and retrieval of objects.
OCTREE - Same as quadtree but now for 3d spaces and splitting into 8 regions.
R-TREE - Like Oct tree but uses rectangles not cubes
KD-TREE - Uses Hyperplanes to partition any dimension in half and everything below and above a value go on each side. 
It can do this many times like the other Spatial Partition types.
VORONOI DIAGRAM - Used to divide regions and objects by how far away they are from certain points. Good for checking
what is close to different points.

Uses

+
+
+
-
-


Getting Started
To use this spatial partitioning system in your Unity project, follow these steps:

Clone or download the repository to your local machine.
Import the SpatialPartition folder into your Unity project.
Add the Quadtree script to any game object that needs spatial partitioning.
Set the parameters of the Quadtree script, including the world bounds and maximum number of objects per node.
Use the Quadtree Insert and Retrieve methods to add and retrieve game objects from the spatial partition.

Example Usage
Copy code
// Create a new Quadtree with a world size of 1000x1000 units
Quadtree quadtree = new Quadtree(new Rect(0, 0, 1000, 1000), 10);

// Add a GameObject to the Quadtree
GameObject myObject = GameObject.Find("MyObject");
quadtree.Insert(myObject);

// Retrieve all objects within a given area
List<GameObject> objectsInArea = quadtree.Retrieve(new Rect(500, 500, 100, 100));
